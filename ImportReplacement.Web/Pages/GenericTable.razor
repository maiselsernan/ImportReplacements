@using Microsoft.Extensions.Configuration
@page "/"
@page "/GenericTable/{type}"

@using BlazorTable
@using System.Threading
@using ImportReplacement.Models
@using System.ComponentModel
@using Blazor.DownloadFileFast.Interfaces
@using ImportReplacement.Web.Services.Interfaces
@inject IToastService _toastService
@inject IReplacementService _replacementService
@inject ITypesService _typesService
@inject NavigationManager _navigationManager
@inject RoutingHelper _routingHelper
@inject IReasonService _reasonService
@inject IConfiguration _configuration
@inject IBlazorDownloadFileService _blazorDownloadFileService
@implements IDisposable


<h3>@_requestType.Name()</h3>

@if (_data == null)
{
    <div class="spinner"></div>
}
else
{
    <SiteSelector @ref="_siteSelector" Sites="@_sitesList" OnSiteSelection="@(siteId => FilterSite(siteId))" />
    <BlazorTable.Table TableItem="RowToApprove" Items="@_data" PageSize="15" @ref="_table">
        <BlazorTable.Column TableItem="RowToApprove" Title="Approved" Field="@(x => x.Approved)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                <input type="checkbox" class="form-control form-control-sm" @bind-value="@(context.Approved)" checked="@context.Approved" disabled="@context.IsDisabled" />
            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column TableItem="RowToApprove" Title="Old Number" Field="@(x => x.OldNumber)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                @if (_requiredChannel)
                {
                    @context.OldNumber
                }
                else
                {
                    <input type="text" @bind-value="@context.OldNumber" class="form-control form-control-sm" disabled="@context.Approved" />
                }

            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column TableItem="RowToApprove" Title="Old Reading" Field="@(x => x.OldReading)" Sortable="true" Filterable="true" Width="8%">
            <Template>
                <input type="text" @bind-value="@context.OldReading" class="form-control form-control-sm" disabled="@context.Approved" />
            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column TableItem="RowToApprove" Title="New Number" Field="@(x => x.NewNumber)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                @if (_requiredChannel)
                {
                    @context.NewNumber
                }
                else
                {
                    <input type="text" @bind-value="@context.NewNumber" class="form-control form-control-sm" disabled="@context.Approved" />
                }
            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column TableItem="RowToApprove" Title="New Reading" Field="@(x => x.Reading)" Sortable="true" Filterable="true" Width="8%">
            <Template>
                <input type="text" @bind-value="@context.Reading" class="form-control form-control-sm" disabled="@context.Approved" />
            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column TableItem="RowToApprove" Title="Address" Field="@(x => x.AddressLine1)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                @context.AddressLine1 @context.AddressLine2
            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column TableItem="RowToApprove" Title="Full Name" Field="@(x => x.FirstName)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                @context.FirstName  @context.LastName
            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column TableItem="RowToApprove" Title="Channel Id" Field="@(x => x.ChannelId)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                @context.ChannelId
                @if (context.NewNumber != context.ChannelMeterNumber)
                {
                    <i class="fas fa-exclamation-triangle text-warning"></i>
                }
            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column TableItem="RowToApprove" Title="Diameter" Field="@(x => x.Diameter)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                @context.Diameter
            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column TableItem="RowToApprove" Title="Description" Field="@(x => x.Code)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                @string.Join(", ", Utils.GetDescriptions(context.Code))
            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column TableItem="RowToApprove" Title="Comment" Field="@(x => x.Comment)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                @context.Comment
            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column @ref="_siteColumn" TableItem="RowToApprove" Title="Site" Field="@(x => x.SiteId)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                @context.SiteId -  @context.SiteName
            </Template>
        </BlazorTable.Column>
        <BlazorTable.Column TableItem="RowToApprove" Title="User" Field="@(x => x.User)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                @context.User
            </Template>
        </BlazorTable.Column>
        <DetailTemplate TableItem="RowToApprove">
            <DetailsComponent Context="@context" IsBillable="@_isBillable"></DetailsComponent>
            <div class="d-inline-block">
                <Blazorise.Button Clicked="@(() => IgnoreMeterAsync(context.CommandId))" Color="Color.Warning">Ignore Meter</Blazorise.Button>
                <hr />
                <Channels MeterNumber=@context.NewNumber ChannelId=@context.ChannelId
                          OnChannelSelection="@(channel => { context.ChannelId = channel; context.ChannelMeterNumber = context.NewNumber; })"
                          SaveWithoutChannel="@(() => context.Approved = true)" CouldSaveWithoutChannel="@_couldSaveWithoutChannel" />
            </div>

        </DetailTemplate>
        <EmptyDataTemplate>
            <div class="text-center">
                No rows found!
            </div>
        </EmptyDataTemplate>
        <Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true" />
    </BlazorTable.Table>
    <Blazorise.Button Clicked="@SaveApprovedRowsAsync" Color="Color.Primary" Loading="@IsLoading">Import Replacements</Blazorise.Button>
    <Confirm @ref="ConfirmIgnore" ConfirmationChanged="ConfirmIgnore_Click" ConfirmationTitle="Ignore Meter" ConfirmationMessage="Are you sure you want to ignore this meter?"></Confirm>

}



@code {
    [Parameter]
    public string Type { get; set; }

    public string CurrentReason { get; set; }

    private ITable<RowToApprove> _table;
    private IColumn<RowToApprove> _siteColumn;
    private List<RowToApprove> _data;
    private List<MeterType> _meterTypes;
    private List<MeterManufacturer> _meterManufacturers;
    private List<MeterModel> _meterModels;
    private Dictionary<long, string> _sites;
    private List<Site> _sitesList;
    private SiteSelector _siteSelector;
    private int _siteId;
    private RequestTypes _requestType;
    protected Confirm ConfirmIgnore { get; set; }
    private long _commandId;
    public bool IsLoading;
    private bool _isBillable;
    private bool _couldSaveWithoutChannel;
    bool _requiredChannel;

    protected override Task OnInitializedAsync()
    {
        _navigationManager.LocationChanged += LocationChanged;

        return PopulateEnumsAsync();
    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        _routingHelper.SourcePage = $"/GenericTable/{Type}";
    }
    void IDisposable.Dispose()
    {
        _navigationManager.LocationChanged -= LocationChanged;
    }
    private async Task LoadDataAsync()
    {
        if (string.IsNullOrEmpty(Type))
        {
            Type = RequestTypes.Maintain.ToString();
        }
        Enum.TryParse(Type, out _requestType);
        _requiredChannel = IsRequiredChannel();
        _isBillable = !_requiredChannel;
        _couldSaveWithoutChannel = !_requiredChannel;
        var data = (await _replacementService.GetMetersToApproveAsync(_requestType)).ToArray();
        _sites = new Dictionary<long, string>();
        foreach (var item in data)
        {
            item.PropertyChanged += ItemOnPropertyChanged;
            if (!_sites.ContainsKey(item.SiteId.Value))
            {
                _sites.Add(item.SiteId.Value, item.SiteName);
            }

        }
        _sitesList = _sites.Select(p => new Site { ID = (int)p.Key, SiteName = p.Value }).ToList();
        if (data.Length == 0)
        {
            _toastService.ShowInfo("No data to display", "No Data");
        }
        CopyData(data.ToList());
    }

    private bool IsRequiredChannel()
    {
        return _requestType == RequestTypes.MaintainRequiredChannel ||
               _requestType == RequestTypes.ReplaceRequiredChannel ||
               _requestType == RequestTypes.InstallationRequiredChannel;
    }

    private async Task PopulateEnumsAsync()
    {
        _meterTypes = (await _typesService.GetMeterTypesAsync()).ToList();
        _meterManufacturers = (await _typesService.GetMeterManufacturersAsync()).ToList();
        _meterModels = (await _typesService.GetMeterModelsAsync()).ToList();
    }

    private void ItemOnPropertyChanged(object sender, PropertyChangedEventArgs e)
    {

        switch (e.PropertyName)
        {
            case nameof(RowToApprove.Approved):
            case nameof(RowToApprove.MeterManufacturer):
            case nameof(RowToApprove.MeterModel):
            case nameof(RowToApprove.MeterType):
            case nameof(RowToApprove.ChannelId):
            case nameof(RowToApprove.Billable):
            case nameof(RowToApprove.ReasonId):
            case nameof(RowToApprove.ChargeDescription):
            case nameof(RowToApprove.OldNumber):
            case nameof(RowToApprove.NewNumber):
            case nameof(RowToApprove.OldReading):
            case nameof(RowToApprove.Reading):
                break;
            default:
                return;
        }
        _replacementService.ChangeRowAsync(sender as RowToApprove);
    }

    private void CopyData(List<RowToApprove> data)
    {
        var oldData = Interlocked.Exchange(ref _data, data);
        if (oldData != null)
        {
            foreach (var item in oldData)
            {
                item.PropertyChanged -= ItemOnPropertyChanged;
            }
        }
    }

    protected override Task OnParametersSetAsync()
    {
        CopyData(null);
        return LoadDataAsync();
    }

    private async Task SaveApprovedRowsAsync()
    {
        IsLoading = true;

        var responsesToFile = await _replacementService.SaveApprovedRowsAsync(_requestType, _siteId);
        if (responsesToFile != null)
        {
            var siteName = _sites.FirstOrDefault(x => x.Key == _siteId).Value;
            await _blazorDownloadFileService.DownloadFileAsync($"{siteName}_{DateTime.Now.Date}.csv", responsesToFile);
            _navigationManager.NavigateTo("/GenericTable/" + Type, true);
        }
        IsLoading = false;

    }


    private void FilterSite(int siteId)
    {
        _siteId = siteId;
        if (siteId <= 0)
        {
            _siteColumn.Visible = true;
            _siteColumn.Filter = null;
        }
        else
        {
            _siteColumn.Visible = false;
            _siteColumn.Filter = x => x.SiteId == siteId;
        }
        _table.Refresh();

    }

    protected async Task ConfirmIgnore_Click(bool manuallyConfirmed)
    {
        if (manuallyConfirmed)
        {
            var index = _data.FindIndex(item => item.CommandId == _commandId);
            await _replacementService.IgnoreMeterAsync(_commandId);
            if (index != -1) _data.RemoveAt(index);
        }
    }



    private void IgnoreMeterAsync(long commandId)
    {
        _commandId = commandId;
        ConfirmIgnore.Show();
    }


}
